version: '4.30'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile_backend
    ports:
      - "8005:8000"
    volumes:
      - .:/app
    environment:
      DATABASE_URL: "postgresql://neondb_owner:VhFlv4Nn6ZwQ@ep-noisy-water-a7lnl2wu-pooler.ap-southeast-2.aws.neon.tech/dummy_data?sslmode=require"
      KAFKA_BROKER_URL: "broker:9092"
    # networks:
    #   - app-network

  frontend:
    build:
      context: .
      dockerfile: Dockerfile_frontend
    ports:
      - "8501:8000"
    volumes:
      - .:/app
    depends_on:
      - web
    # networks:
    #   - app-network

  # db:
  #   image: postgres:latest
  #   environment:
  #     POSTGRES_USER: neondb_owner
  #     POSTGRES_PASSWORD: VhFlv4Nn6ZwQ
  #     POSTGRES_DB: dummy_data
  #   ports:
  #     - "5432:5432"
    # networks:
    #   - app-network

  # kong-database:
  #   image: postgres:latest
  #   environment:
  #     POSTGRES_USER: kong
  #     POSTGRES_DB: kong
  #     POSTGRES_PASSWORD: kong
  #   ports:
  #     - "5433:5432"
  #   networks:
  #     - app-network

  #   healthcheck:
  #     test: ["CMD","executable", "arg"]
  #     interval: 1m30s
  #     timeout: 30s
  #     retries: 5
  #     start_period: 30s

  # kong-migration:
  #   image: kong:latest
  #   command: kong migrations bootstrap
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_HOST: kong-database
  #     KONG_PG_DATABASE: kong
  #     KONG_PG_USER: kong
  #     KONG_PG_PASSWORD: kong
  #   restart: on-failure  
  #   depends_on:
  #     - kong-database
  #   networks:
  #     - app-network

  # kong-migrations-up:
  #   image: kong:latest
  #   command: kong migrations up && kong migrations finish
  #   depends_on:
  #     - kong-database
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_DATABASE: kong
  #     KONG_PG_HOST: kong-database
  #     KONG_PG_USER: kong
  #     KONG_PG_PASSWORD: kong
  #   restart: on-failure
  #   networks:
  #     - app-network

  # kong:
  #   image: kong:latest
  #   user: kong
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_DATABASE: kong
  #     KONG_PG_HOST: kong-database
  #     KONG_PG_USER: kong
  #     KONG_PG_PASSWORD: kong
  #     KONG_ADMIN_ACCESS_LOG: /dev/stdout
  #     KONG_ADMIN_ERROR_LOG: /dev/stdout
  #     KONG_PROXY_LISTEN: '0.0.0.0:8005'
  #     KONG_ADMIN_LISTEN: '0.0.0.0:8001'
  #     KONG_ADMIN_GUI_LISTEN: '0.0.0.0:8003'
  #     KONG_PROXY_ACCESS_LOG: /dev/stdout
  #     KONG_PROXY_ERROR_LOG: /dev/stderr
  #     KONG_PREFIX: /tmp/kong
  #     KONG_NGINX_PROXY_CLIENT_MAX_BODY_SIZE: 15m  # Increase max body size
  #     KONG_NGINX_PROXY_CLIENT_BODY_BUFFER_SIZE: 128k  # Increase body buffer size
  #     KONG_NGINX_HTTP_CLIENT_HEADER_BUFFER_SIZE: 128k  # Increase header buffer size
  #     KONG_NGINX_HTTP_LARGE_CLIENT_HEADER_BUFFERS: "4 64k"  # Increase large header buffer size
  #     KONG_DELARATIVE_CONFIG: '/opt/kong/kong.yaml'
  #     #------------------------------------
  #     #KONG_PROXY_LISTEN: '0.0.0.0:8002'
  #     #KONG_ADMIN_GUI_LISTEN: '0.0.0.0:8003'
  #     #KONG_PREFIX: /tmp/kong
  #     #KONG_DELARATIVE_CONFIG: '/opt/kong/kong.yaml'
  #     #-------------------------------------
  #     #KONG_ADMIN_ERROR_LOG: /dev/stderr
  #     #KONG_ADMIN_LISTEN: '0.0.0.0:8001'
  #   ports:
  #     - "8005:8005"
  #     - "8443:8443"
  #     - "8003:8003"
  #     - "8001:8001"
  #     - "8444:8444"
  #     - "127.0.0.1:8004:8002/tcp"
  #     #---------------------------------------
  #     #- "127.0.0.1:8002:8002/tcp"
  #     # "127.0.0.1:8444:8444/tcp"
  #     #"127.0.0.1:8003:8003/tcp"
  #     #---------------------------------------
  #   restart: on-failure
    
  #   depends_on:
  #     - kong-database
  #     - kong-migration
    
    

  #   networks:
  #     - app-network
  
  
  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
    # networks:
    #   - app-network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - broker
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: 'local'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:9092'
    # networks:
      # - app-network
      
  # kong-migrations-up:
  #   image: kong:latest
  #   command: kong migrations up && kong migrations finish
  #   depends_on:
  #     - db
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_DATABASE: kong
  #     KONG_PG_HOST: db
  #     KONG_PG_USER: kong
  #     KONG_PG_PASSWORD: kong
  #   restart: on-failure
  #   networks:
  #     - app-network
networks:
  default:
    driver: bridge

  
# volumes:
#   kong_data: {}
#   kong_prefix_vol:
#     driver_opts:
#       type: tmpfs
#       device: tmpfs
#   kong_tmp_vol:
#     driver_opts:
#       type: tmpfs
#       device: tmpfs

